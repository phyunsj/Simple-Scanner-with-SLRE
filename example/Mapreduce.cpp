//
// 
// PLEASE DO NOT EDIT THIS FILE. AUTO-GENERATED.
//


#include <string>
#include <sstream>
#include "Mapreduce.h"

void Mapreduce::SET_VALID_BIT_TASK_IO_SORT_MB() { valid = valid | (0x1 << 0); }

void Mapreduce::SET_CHANGE_BIT_TASK_IO_SORT_MB() { if ( task_io_sort_mb != MAPREDUCE_TASK_IO_SORT_MB_DEFAULT )  valid = valid | (0x1 << 0); }

void Mapreduce::SET_VALID_BIT_MAP_SORT_SPILL_PERCENT() { valid = valid | (0x1 << 1); }

void Mapreduce::SET_CHANGE_BIT_MAP_SORT_SPILL_PERCENT() { if ( map_sort_spill_percent != MAPREDUCE_MAP_SORT_SPILL_PERCENT_DEFAULT )  valid = valid | (0x1 << 1); }

void Mapreduce::SET_VALID_BIT_TASK_IO_SORT_FACTOR() { valid = valid | (0x1 << 2); }

void Mapreduce::SET_CHANGE_BIT_TASK_IO_SORT_FACTOR() { if ( task_io_sort_factor != MAPREDUCE_TASK_IO_SORT_FACTOR_DEFAULT )  valid = valid | (0x1 << 2); }

void Mapreduce::SET_VALID_BIT_MAP_COMBINE_MINSPILLS() { valid = valid | (0x1 << 3); }

void Mapreduce::SET_CHANGE_BIT_MAP_COMBINE_MINSPILLS() { if ( map_combine_minspills != MAPREDUCE_MAP_COMBINE_MINSPILLS_DEFAULT )  valid = valid | (0x1 << 3); }

void Mapreduce::SET_VALID_BIT_CLUSTER_LOCAL_DIR() { valid = valid | (0x1 << 4); }

void Mapreduce::SET_CHANGE_BIT_CLUSTER_LOCAL_DIR() { if ( cluster_local_dir != MAPREDUCE_CLUSTER_LOCAL_DIR_DEFAULT )  valid = valid | (0x1 << 4); }

void Mapreduce::SET_VALID_BIT_REDUCE_MERGE_MEMTOMEM_ENABLED() { valid = valid | (0x1 << 5); }

void Mapreduce::SET_CHANGE_BIT_REDUCE_MERGE_MEMTOMEM_ENABLED() { if ( reduce_merge_memtomem_enabled != MAPREDUCE_REDUCE_MERGE_MEMTOMEM_ENABLED_DEFAULT )  valid = valid | (0x1 << 5); }

void Mapreduce::SET_VALID_BIT_FRAMEWORK_NAME() { valid = valid | (0x1 << 6); }

void Mapreduce::SET_CHANGE_BIT_FRAMEWORK_NAME() { if ( framework_name != MAPREDUCE_FRAMEWORK_NAME_DEFAULT )  valid = valid | (0x1 << 6); }

void Mapreduce::SET_VALID_BIT_REDUCE_SHUFFLE_PARALLELCOPIES() { valid = valid | (0x1 << 7); }

void Mapreduce::SET_CHANGE_BIT_REDUCE_SHUFFLE_PARALLELCOPIES() { if ( reduce_shuffle_parallelcopies != MAPREDUCE_REDUCE_SHUFFLE_PARALLELCOPIES_DEFAULT )  valid = valid | (0x1 << 7); }

void Mapreduce::SET_VALID_BIT_REDUCE_MEMORY_TOTALBYTES() { valid = valid | (0x1 << 8); }

void Mapreduce::SET_CHANGE_BIT_REDUCE_MEMORY_TOTALBYTES() { if ( reduce_memory_totalbytes != MAPREDUCE_REDUCE_MEMORY_TOTALBYTES_DEFAULT )  valid = valid | (0x1 << 8); }

void Mapreduce::SET_VALID_BIT_REDUCE_SHUFFLE_MEMORY_LIMIT_PERCENT() { valid = valid | (0x1 << 9); }

void Mapreduce::SET_CHANGE_BIT_REDUCE_SHUFFLE_MEMORY_LIMIT_PERCENT() { if ( reduce_shuffle_memory_limit_percent != MAPREDUCE_REDUCE_SHUFFLE_MEMORY_LIMIT_PERCENT_DEFAULT )  valid = valid | (0x1 << 9); }

void Mapreduce::SET_VALID_BIT_JOB_UBERTASK_MAXMAPS() { valid = valid | (0x1 << 10); }

void Mapreduce::SET_CHANGE_BIT_JOB_UBERTASK_MAXMAPS() { if ( job_ubertask_maxmaps != MAPREDUCE_JOB_UBERTASK_MAXMAPS_DEFAULT )  valid = valid | (0x1 << 10); }

void Mapreduce::SET_VALID_BIT_JOB_UBERTASK_ENABLE() { valid = valid | (0x1 << 11); }

void Mapreduce::SET_CHANGE_BIT_JOB_UBERTASK_ENABLE() { if ( job_ubertask_enable != MAPREDUCE_JOB_UBERTASK_ENABLE_DEFAULT )  valid = valid | (0x1 << 11); }

void Mapreduce::SET_VALID_BIT_JOB_UBERTASK_MAXBYTES() { valid = valid | (0x1 << 12); }

void Mapreduce::SET_CHANGE_BIT_JOB_UBERTASK_MAXBYTES() { if ( job_ubertask_maxbytes != MAPREDUCE_JOB_UBERTASK_MAXBYTES_DEFAULT )  valid = valid | (0x1 << 12); }

void Mapreduce::SET_VALID_BIT_MAP_MEMORY_MB() { valid = valid | (0x1 << 13); }

void Mapreduce::SET_CHANGE_BIT_MAP_MEMORY_MB() { if ( map_memory_mb != MAPREDUCE_MAP_MEMORY_MB_DEFAULT )  valid = valid | (0x1 << 13); }

void Mapreduce::SET_VALID_BIT_REDUCE_MEMORY_MB() { valid = valid | (0x1 << 14); }

void Mapreduce::SET_CHANGE_BIT_REDUCE_MEMORY_MB() { if ( reduce_memory_mb != MAPREDUCE_REDUCE_MEMORY_MB_DEFAULT )  valid = valid | (0x1 << 14); }

std::string Mapreduce::SELECT_STMT() { 
            
    std::string stmt = "SELECT ";
    std::stringstream stmt_out;
    int firstEntry = 1;
    stmt_out << stmt ;
    
	if ( MAPREDUCE_TASK_IO_SORT_MB_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << " TASK_IO_SORT_MB"; } else { stmt_out << " , TASK_IO_SORT_MB"; } 
	}

	if ( MAPREDUCE_MAP_SORT_SPILL_PERCENT_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << " MAP_SORT_SPILL_PERCENT"; } else { stmt_out << " , MAP_SORT_SPILL_PERCENT"; } 
	}

	if ( MAPREDUCE_TASK_IO_SORT_FACTOR_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << " TASK_IO_SORT_FACTOR"; } else { stmt_out << " , TASK_IO_SORT_FACTOR"; } 
	}

	if ( MAPREDUCE_MAP_COMBINE_MINSPILLS_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << " MAP_COMBINE_MINSPILLS"; } else { stmt_out << " , MAP_COMBINE_MINSPILLS"; } 
	}

	if ( MAPREDUCE_REDUCE_MERGE_MEMTOMEM_ENABLED_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << " REDUCE_MERGE_MEMTOMEM_ENABLED"; } else { stmt_out << " , REDUCE_MERGE_MEMTOMEM_ENABLED"; } 
	}

	if ( MAPREDUCE_FRAMEWORK_NAME_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << " FRAMEWORK_NAME"; } else { stmt_out << " , FRAMEWORK_NAME"; } 
	}

	if ( MAPREDUCE_REDUCE_SHUFFLE_PARALLELCOPIES_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << " REDUCE_SHUFFLE_PARALLELCOPIES"; } else { stmt_out << " , REDUCE_SHUFFLE_PARALLELCOPIES"; } 
	}

	if ( MAPREDUCE_REDUCE_SHUFFLE_MEMORY_LIMIT_PERCENT_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << " REDUCE_SHUFFLE_MEMORY_LIMIT_PERCENT"; } else { stmt_out << " , REDUCE_SHUFFLE_MEMORY_LIMIT_PERCENT"; } 
	}

	if ( MAPREDUCE_JOB_UBERTASK_MAXMAPS_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << " JOB_UBERTASK_MAXMAPS"; } else { stmt_out << " , JOB_UBERTASK_MAXMAPS"; } 
	}

	if ( MAPREDUCE_JOB_UBERTASK_ENABLE_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << " JOB_UBERTASK_ENABLE"; } else { stmt_out << " , JOB_UBERTASK_ENABLE"; } 
	}

	if ( MAPREDUCE_MAP_MEMORY_MB_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << " MAP_MEMORY_MB"; } else { stmt_out << " , MAP_MEMORY_MB"; } 
	}

	if ( MAPREDUCE_REDUCE_MEMORY_MB_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << " REDUCE_MEMORY_MB"; } else { stmt_out << " , REDUCE_MEMORY_MB"; } 
	}

    stmt_out << " FROM MAPREDUCE ;";
    return stmt_out.str();  

}


std::string Mapreduce::UPDATE_STMT() { 
            
    std::string stmt = "UPDATE MAPREDUCE SET ";
    std::stringstream stmt_out;
    int firstEntry = 1;
    stmt_out << stmt ;
    
	if ( MAPREDUCE_TASK_IO_SORT_MB_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "TASK_IO_SORT_MB=" << task_io_sort_mb; }
		else {  stmt_out << ",TASK_IO_SORT_MB=" << task_io_sort_mb;}
	}
	if ( MAPREDUCE_MAP_SORT_SPILL_PERCENT_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "MAP_SORT_SPILL_PERCENT=" << map_sort_spill_percent; }
		else {  stmt_out << ",MAP_SORT_SPILL_PERCENT=" << map_sort_spill_percent;}
	}
	if ( MAPREDUCE_TASK_IO_SORT_FACTOR_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "TASK_IO_SORT_FACTOR=" << task_io_sort_factor; }
		else {  stmt_out << ",TASK_IO_SORT_FACTOR=" << task_io_sort_factor;}
	}
	if ( MAPREDUCE_MAP_COMBINE_MINSPILLS_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "MAP_COMBINE_MINSPILLS=" << map_combine_minspills; }
		else {  stmt_out << ",MAP_COMBINE_MINSPILLS=" << map_combine_minspills;}
	}
	if ( MAPREDUCE_REDUCE_MERGE_MEMTOMEM_ENABLED_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "REDUCE_MERGE_MEMTOMEM_ENABLED=" << reduce_merge_memtomem_enabled; }
		else {  stmt_out << ",REDUCE_MERGE_MEMTOMEM_ENABLED=" << reduce_merge_memtomem_enabled;}
	}
	if ( MAPREDUCE_FRAMEWORK_NAME_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "FRAMEWORK_NAME=\"" << framework_name << "\""; }
		else {  stmt_out << ",FRAMEWORK_NAME=\"" << framework_name << "\"";}
	}
	if ( MAPREDUCE_REDUCE_SHUFFLE_PARALLELCOPIES_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "REDUCE_SHUFFLE_PARALLELCOPIES=" << reduce_shuffle_parallelcopies; }
		else {  stmt_out << ",REDUCE_SHUFFLE_PARALLELCOPIES=" << reduce_shuffle_parallelcopies;}
	}
	if ( MAPREDUCE_REDUCE_SHUFFLE_MEMORY_LIMIT_PERCENT_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "REDUCE_SHUFFLE_MEMORY_LIMIT_PERCENT=" << reduce_shuffle_memory_limit_percent; }
		else {  stmt_out << ",REDUCE_SHUFFLE_MEMORY_LIMIT_PERCENT=" << reduce_shuffle_memory_limit_percent;}
	}
	if ( MAPREDUCE_JOB_UBERTASK_MAXMAPS_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "JOB_UBERTASK_MAXMAPS=" << job_ubertask_maxmaps; }
		else {  stmt_out << ",JOB_UBERTASK_MAXMAPS=" << job_ubertask_maxmaps;}
	}
	if ( MAPREDUCE_JOB_UBERTASK_ENABLE_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "JOB_UBERTASK_ENABLE=" << job_ubertask_enable; }
		else {  stmt_out << ",JOB_UBERTASK_ENABLE=" << job_ubertask_enable;}
	}
	if ( MAPREDUCE_MAP_MEMORY_MB_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "MAP_MEMORY_MB=" << map_memory_mb; }
		else {  stmt_out << ",MAP_MEMORY_MB=" << map_memory_mb;}
	}
	if ( MAPREDUCE_REDUCE_MEMORY_MB_VALID_FLAG & valid ) {
		if (firstEntry) { firstEntry = 0; stmt_out << "REDUCE_MEMORY_MB=" << reduce_memory_mb; }
		else {  stmt_out << ",REDUCE_MEMORY_MB=" << reduce_memory_mb;}
	};
    stmt_out << ";";

    return stmt_out.str(); 

}

Mapreduce::~Mapreduce() {}
Mapreduce::Mapreduce():task_io_sort_mb(100),map_sort_spill_percent(80),task_io_sort_factor(100),map_combine_minspills(3),cluster_local_dir("/mapred/local"),reduce_merge_memtomem_enabled(0),framework_name("yarn/local"),reduce_shuffle_parallelcopies(5),reduce_memory_totalbytes(1024),reduce_shuffle_memory_limit_percent(70),job_ubertask_maxmaps(9),job_ubertask_enable(1),job_ubertask_maxbytes(256),map_memory_mb(1024),reduce_memory_mb(1024) {}